import argparse
from os import PathLike
import textwrap
from pathlib import Path
from pprint import pprint

from jinja2 import Environment, FileSystemLoader


from filters import Filters

MF6_LENVARNAME = 16
F90_LINELEN = 82
PROJ_ROOT_PATH = Path(__file__).parents[3]
TEMPLATES_PATH = Path(__file__).parent / "templates"
DEFAULT_DFNS_PATH = Path(__file__).parents[1] / "dfns.txt"
DFN_PATH = PROJ_ROOT_PATH / "doc" / "mf6io" / "mf6ivar" / "dfn"
SRC_PATH = PROJ_ROOT_PATH / "src"
IDM_PATH = SRC_PATH / "Idm"

        
def _get_template_env():
    template_loader = FileSystemLoader(TEMPLATES_PATH)
    template_env = Environment(
        loader=template_loader,
        trim_blocks=True,
        lstrip_blocks=True,
        line_statement_prefix="_",
        keep_trailing_newline=True,
    )
    template_env.filters["value"] = Filters.value
    return template_env


def make_targets(dfn, outdir: PathLike, verbose: bool = False):
    # TODO component file
    # TODO selector file
    pass


def make_all(dfndir: PathLike, outdir: PathLike, verbose: bool = False, version: int = 1):
    """Generate Fortran source files from DFN files."""
    # TODO all component and selector files
    # TODO master selector file
    pass


def _expand_dfns(dfns: str | PathLike | list[str | PathLike]) -> list[Path]:
    """Expand DFN file or directory paths to a list of DFN file paths"""
    if isinstance(dfns, list):
        dfns = [Path(p) for p in dfns]
    elif isinstance(dfn, (str, Path)):
        dfns = [Path(dfns)]
    else:
        raise TypeError(f"Unexpected dfn type: {type(dfns)}")

    extensions = [
        "*.dfn",
        # TODO support toml
    ]
    dfns_ = []
    for path in dfns:
        if path.is_dir():
            for ext in extensions:
                dfns_.extend(path.glob(ext))
        else:
            # if we only have a filename, assume
            # it's in the default dfn directory.
            # TODO remove when idm supports all dfns
            # and we no longer have to specify files.
            if len(path.parts) == 1:
                path = DFN_PATH / path
            dfns_.append(path)

    assert all(p.is_file() for p in dfns_)
    return dfns_


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="Convert DFN files to Fortran source files",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent(
            """\
            Generate Fortran source code from DFN files. This script
            converts definition (DFN) files to Fortran source files,
            each representing a parameter set for a particular input
            definition. Fortran files generated by this tool provide
            support for simulations, models or packages described by
            the given DFN files. Each DFN file is transformed into a
            corresponding Fortran file with "idm" and the same stem:
            e.g. gwf-ic.dfn becomes gwf-icidm.f90.
            """
        ),
    )
    parser.add_argument(
        "dfn",
        nargs="*",
        default=DFN_PATH,
        help="Path to one or more DFN files or directories containing DFN files",
    )
    parser.add_argument(
        "-o",
        "--outdir",
        required=False,
        default=IDM_PATH,
        help="The directory to write Fortran source files",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        required=False,
        default=False,
        help="Whether to show verbose output",
    )
    args = parser.parse_args()
    dfns = _expand_dfns(args.dfn)
    outdir = Path(args.outdir) if args.outdir else Path.cwd()
    if verbose := args.verbose:
        print("Generating Fortran source files from DFNs:")
        pprint(dfns) 

    selectors = []
    template_env = _get_template_env
    component_idm_template = template_env().get_template("Componentidm.f90.jinja")
    component_selector_template = template_env().get_template("IdmComponentDfnSelector.f90.jinja")
    selector_template = template_env().get_template("IdmDfnSelector.f90.jinja")
    
    for dfn in dfns:
        with open(outdir / f"{dfn.stem}idm.f90", "w") as f:
            f.write(component_idm_template.render(dfn=dfn))

    for selector in selectors:
        with open(outdir / f"Idm{selector['name']}DfnSelector.f90", "w") as f:
            f.write(component_selector_template.render(selector=selector))

    with open(outdir / "IdmDfnSelector.f90", "w") as f:
        f.write(selector_template.render(selectors=selectors))